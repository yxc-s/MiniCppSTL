#include "../core/mstl_common"
#include "../allocators/mstl_allocator"
#include "../utility/mstl_memory"
#include "../iterators/mstl_iterator_base" 
#include <string.h> //memcpy
#include <iostream>//cout, cin

NAMESPACE_MSTL


//TODO:运算符重载，字符串插入修改替换，友元函数重载, KMP_SEARCH?
template<typename Allocator = mstl::Allocator<char>>
class string{
    using this_string_type = mstl::string<Allocator>;
public:
    using value_type       =  char;
    using pointer          =  char*;
    using reference        =  char&;
    using const_pointer    =  const char*;
    using const_reference  =  const char&;
    using size_type        =  mstl::size_t;
    using container_type   =  mstl::container_type_base::_string_;


    constexpr const static size_type npos = static_cast<size_type>(-1);//?怎么打最大值进去

    /* 构造和析构函数 */
    string();
    string(const_pointer data);
    string(size_type size, value_type data);
    string(const this_string_type& other);
    string(this_string_type&& other) noexcept;
    string(const std::initializer_list<char>& ls);
    template<typename Iterator, typename = std::enable_if_t<std::is_same_v<typename Iterator::container_type, container_type>>>
    string(Iterator left, const Iterator& right);
    ~string();

    /* 简短小函数 */
    reference& back() { return data_ptr_[current_size_ - 1]; }
    const_reference back() const { return data_ptr_[current_size_ - 1]; }
    reference& front() { return data_ptr_[0]; }
    const_reference front() const { return data_ptr_[0]; }
    reference& operator [](size_type pos) { return data_ptr_[pos]; }
    const_reference operator[](size_type pos) const { return data_ptr_[pos]; }

    /* 内存控制 */
    void reserve(size_type size);
    
    /* 长度查询系列 */
    size_type length() const noexcept { return current_size_; }
    size_type size() const noexcept { return current_size_; }
    bool empty() const noexcept { return current_size_ == 0; }
    void clear() { current_size_ = 0; }
    void resize(size_type size) {
        if (size > capacity_) {
            reserve(current_size_);
        }
        current_size_ = size;
    }

    /* find系列函数 */
    size_type find(value_type ch, size_t pos = 0);
    size_type find(const_pointer data, size_t pos = 0);
    size_type find(const this_string_type& data, size_t pos = 0);
    size_type find_first_of(value_type ch, size_type pos = 0);
    size_type find_first_of(const_pointer data, size_type pos = 0);
    size_type find_first_of(const this_string_type& data, size_type pos = 0);
    size_type find_last_of(value_type ch, size_type pos = npos);
    size_type find_last_of(const_pointer data, size_type pos = npos);
    size_type find_last_of(const this_string_type& data, size_type pos = npos);

    /* 获取子串 */
    this_string_type substr(size_type pos, size_type size) {
        if (size > current_size_ - pos) {
            size = current_size_ - pos;
        }
        //TODO:异常检查机制
        this_string_type res;
        res.resize(size);
        size_type i = 0;
        while (size--) {
            res[i++] = data_ptr_[pos++]; 
        }
        return res;
    }
    const_pointer data() const noexcept { return data_ptr_; }
    const_pointer c_str() const noexcept { return data_ptr_; }

    /* 修改字符串系列函数 */
    void append(const_pointer data);
    void append(const this_string_type& other);
    void push_back(const_pointer data);
    void push_back(const this_string_type& other);
    void pop_back();
    void replace(size_type pos, size_type size, const_pointer data);
    void replace(size_type pos, size_type size, const this_string_type& data);
    void insert(size_type pos, const_pointer data);
    void insert(size_type pos, const this_string_type& other);
    void erase(size_type pos, size_type size);

    /* 运算符重载 */
    this_string_type& operator =(const_pointer other);
    this_string_type& operator =(const this_string_type& other);
    this_string_type& operator =(this_string_type&& other) noexcept;
    this_string_type& operator +=(const value_type& value);
    this_string_type& operator +=(const_pointer other);
    this_string_type& operator +=(const this_string_type& other);

    /* 友元运算符 */
    template<typename T>
    friend bool operator ==(const mstl::string<T>& lhs, const mstl::string<T>& rhs);

    template<typename T>
    friend bool operator !=(const mstl::string<T>& lhs, const mstl::string<T>& rhs);

    template<typename T>
    friend mstl::string<T> operator +(const mstl::string<T>& lhs, const mstl::string<T>& rhs); 

    template<typename T>
    friend std::istream& operator >>(std::istream& is, string<T>& s);

    template<typename T>
    friend std::ostream& operator <<(std::ostream& os, const string<T>& s);

    /* Iterator */
    //直接从vector拷贝过来的，感觉没啥问题，可以直接用
    template<typename ValueType = char, typename PointerType = ValueType*, typename ReferenceType = ValueType&, const bool IS_REVERSE = false>
    class iterator_impl : public iterator_base<iterator_impl<ValueType, PointerType, ReferenceType, IS_REVERSE>> {
        using this_iter_type = iterator_impl<ValueType, PointerType, ReferenceType, IS_REVERSE>;
    public:
        using value_type         =   ValueType;
        using pointer            =   PointerType;
        using reference          =   ReferenceType;
        using difference_type    =   std::ptrdiff_t;
        using iterator_category  =   mstl::random_access_iterator_tag;
        using container_type     =   mstl::container_type_base::_string_;


        iterator_impl(pointer ptr) : ptr_(ptr) {}
        ~iterator_impl() override = default;


        reference operator*() const { return *ptr_; }
        pointer operator->()  { return ptr_; }

        iterator_impl& operator++() override { 
            if constexpr (IS_REVERSE) {
                -- ptr_;
            }
            else{
                ++ptr_; 
            }
            return *this; 
        }

        iterator_impl operator++(int) override { 
            iterator_impl new_iter = *this; 
            if constexpr (IS_REVERSE) {
                --(*this);
            }
            else{
                ++(*this); 
            }
            return new_iter; 
        }

        iterator_impl& operator--() override { 
            if constexpr (IS_REVERSE) {
                ++ptr_;
            }
            else{
                --ptr_; 
            }
            return *this; 
        }

        iterator_impl operator--(int) override { 
            iterator_impl new_iter = *this;
            if constexpr (IS_REVERSE) {
                ++(*this);
            } else {
                --(*this);
            }
            return new_iter; 
        }

        iterator_impl operator+(difference_type offset) const { 
            if constexpr (IS_REVERSE) {
                return iterator_impl(ptr_ - offset);
            } else {
                return iterator_impl(ptr_ + offset);
            }
        }

        iterator_impl operator-(difference_type offset) const { 
            if constexpr (IS_REVERSE) {
                return iterator_impl(ptr_ + offset);
            } else {
                return iterator_impl(ptr_ - offset);
            }
        }

        difference_type operator-(const this_iter_type& other) const { return ptr_ - other.ptr_; }
        virtual bool operator==(const this_iter_type& other) const override{ return ptr_ == other.ptr_; }
        virtual bool operator!=(const this_iter_type& other) const override{ return !(*this == other);}
        bool operator <(const this_iter_type& other) const { return ptr_ < other.ptr_; }
        bool operator <=(const this_iter_type& other) const { return ptr_ <= other.ptr_; }
        bool operator >(const this_iter_type& other) const { return !(*this <= other); }
        bool operator >=(const this_iter_type& other) const { return !(*this < other); }
        virtual this_iter_type& operator =(const this_iter_type& other) override{
            if (this != &other) {
                ptr_ = other.ptr_;
            }
            return *this;
        }

    private:
        pointer ptr_;
    };

    /* 四种迭代器类型 */
    using iterator = iterator_impl<value_type>;
    using const_iterator = iterator_impl<const value_type, const_pointer, const_reference>;
    using reverse_iterator = iterator_impl<value_type, pointer, reference, true>;
    using const_reverse_iterator = iterator_impl<const value_type, const_pointer, const_reference, true>;

    /* 正向迭代器相关函数 */
    iterator begin() { return iterator(data_ptr_); }
    iterator end()   { return iterator(data_ptr_ + current_size_); }
    const_iterator cbegin() { return const_iterator(data_ptr_); } 
    const_iterator cend() { return const_iterator(data_ptr_ + current_size_); }

    /* 逆向迭代器相关函数 */
    reverse_iterator rbegin() { return reverse_iterator(data_ptr_ + current_size_ - 1); }
    reverse_iterator rend() { return reverse_iterator(data_ptr_ - 1); }
    const_reverse_iterator crbegin() { return const_reverse_iterator(data_ptr_ + current_size_ - 1); }
    const_reverse_iterator crend() { return const_reverse_iterator(data_ptr_ - 1); }


private:
    constexpr static size_type get_c_str_len(const_pointer data) noexcept {
        size_type res = 0;
        for (; data[res] != '\0'; ++res);
        return res;
    }

private:
    Allocator   allocator_;
    pointer     data_ptr_;
    size_type   current_size_;
    size_type   capacity_;

};

/* 默认构造函数 */
template<typename Allocator>
inline string<Allocator>::string():current_size_(0), capacity_(2){
    data_ptr_ = allocator_.allocate(2);
}

/* c字符串构造函数 */
template<typename Allocator>
inline string<Allocator>::string(const_pointer data): current_size_(get_c_str_len(data)), capacity_(current_size_ + 2) {
    data_ptr_ = allocator_.allocate(capacity_);
    memcpy(data_ptr_, data, sizeof(char) * current_size_);
    data_ptr_[current_size_] = '\0';
}

/* 数量+字符构造函数 */
template<typename Allocator>
inline string<Allocator>::string(size_type size, value_type ch): current_size_(size), capacity_(size + 2) {
    data_ptr_ = allocator_.allocate(capacity_);
    std::memset(data_ptr_, ch, current_size_);
    data_ptr_[current_size_] = '\0';
}

/* 拷贝构造函数 */
template<typename Allocator>
inline string<Allocator>::string(const this_string_type& other): current_size_(other.current_size_), capacity_(other.capacity_) {
    data_ptr_ = allocator_.allocate(capacity_);
    std::memcpy(data_ptr_, other.data_ptr_, current_size_ + 1);
}

/* 移动构造函数 */
template<typename Allocator>
inline string<Allocator>::string(this_string_type&& other) noexcept : data_ptr_(other.data_ptr_), current_size_(other.current_size_), capacity_(other.capacity_) {
    other.data_ptr_ = nullptr;
    other.current_size_ = 0;
    other.capacity_ = 0;
}

/* 初始化列表构造 */
template<typename Allocator>
inline string<Allocator>::string(const std::initializer_list<char>& ls): current_size_(ls.size()), capacity_(current_size_ + 2) {
    data_ptr_ = allocator_.allocate(capacity_);
    size_type i = 0;
    for (const auto& c : ls) {
        data_ptr_[i++] = c;
    }
    data_ptr_[current_size_] = '\0';
}

/* 迭代器构造函数 */
template<typename Allocator>
template<typename Iterator, typename>
inline string<Allocator>::string(Iterator first, const Iterator& last){
    current_size_ = last - first;
    capacity_ = current_size_ + 2;
    data_ptr_ = allocator_.allocate(capacity_);
    size_type i = 0;
    while (first != last) {
        data_ptr_[i++] = *first;
        first ++;
    }
    data_ptr_[current_size_] = '\0';
}

/* 析构函数 */
template<typename Allocator>
inline string<Allocator>::~string(){
    allocator_.deallocate(data_ptr_, capacity_);
}

/* 分配指定大小内存 */
template<typename Allocator>
inline void string<Allocator>::reserve(size_type size) {
    if (size > capacity_) {
        pointer new_pointer = allocator_.allocate(size);
        memcpy(new_pointer, data_ptr_, sizeof(char) * current_size_);
        new_pointer[current_size_] = '\0';
        allocator_.deallocate(data_ptr_, current_size_);
        data_ptr_ = new_pointer;
        capacity_ = size;
    }
}

template<typename Allocator>
inline typename string<Allocator>::size_type string<Allocator>::find(value_type ch, size_t pos) {
    while (pos <= current_size_) {
        if (data_ptr_[pos] == ch) {
            return pos;
        }
        ++pos;
    }
    return npos;
}

template<typename Allocator>
inline typename string<Allocator>::size_type string<Allocator>::find(const_pointer data, size_t pos) {
    size_type data_len = get_c_str_len(data);
    size_type i = pos, j = 0;
    while (i + data_len <= current_size_) {
        j = 0;
        for (size_type k = i; j < data_len; ++j, ++k) {
            if (data_ptr_[k] != data[j]) {
                break;
            }
        }
        if (j == data_len) {
            return i;
        }
        i ++;
    }
    return npos;
}

template<typename Allocator>
inline typename string<Allocator>::size_type string<Allocator>::find(const this_string_type& data, size_t pos) {
    return find(data.c_str(), pos);
}

template<typename Allocator>
inline typename string<Allocator>::size_type string<Allocator>::find_first_of(value_type ch, size_type pos) {
    return find(ch, pos);
}

template<typename Allocator>
inline typename string<Allocator>::size_type string<Allocator>::find_first_of(const_pointer data, size_type pos) {
    return find(data, pos);
}

template<typename Allocator>
inline typename string<Allocator>::size_type string<Allocator>::find_first_of(const this_string_type& data, size_type pos) {
    return find(data.c_str(), pos);
}

template<typename Allocator>
inline typename string<Allocator>::size_type string<Allocator>::find_last_of(value_type ch, size_type pos) {
    if (pos == npos) {
        pos = current_size_ - 1;
    }
    while (pos >= 0) {
        if (data_ptr_[pos] == ch) {
            return pos;
        }
    }
    return npos;
}

template<typename Allocator>
inline typename string<Allocator>::size_type string<Allocator>::find_last_of(const_pointer data, size_type pos) {
    if (pos == npos) {
        pos = current_size_ - 1;
    }
    size_type data_len = get_c_str_len(data);
    size_type i = current_size_ - data_len;
    while (i >= 0) {
        size_type j = 0;
        for (size_type k = i; j < data_len; ++k, ++j) {
            if (data_ptr_[k] != data[j]) {
                break;
            }
        }
        if (j == data_len) {
            return i;
        }
        i --;
    } 
    return npos;
}

template<typename Allocator>
inline typename string<Allocator>::size_type string<Allocator>::find_last_of(const this_string_type& data, size_type pos){
    return find_last_of(data.c_str(), pos);
}



END_NAMESPACE